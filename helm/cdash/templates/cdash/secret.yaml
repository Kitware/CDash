{{- $appSecretName := printf "%s-%s" .Release.Name "website" -}}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $appSecretName }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # Generate a random APP_KEY if one doesn't already exist
  {{- $oldAppSecret := lookup "v1" "Secret" .Release.Namespace $appSecretName }}
  {{- $oldAppSecretData := (get $oldAppSecret "data") | default dict }}
  APP_KEY: {{ (get $oldAppSecretData "APP_KEY") | default (randAlphaNum 32 | b64enc) | quote }}

{{ if .Values.minio.enabled }}
{{- $objSecretName := printf "%s-%s" .Release.Name "s3" -}}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $objSecretName }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # Generate a random password if one doesn't already exist
  {{- $oldObjSecret := lookup "v1" "Secret" .Release.Namespace $objSecretName }}
  {{- $oldObjSecretData := (get $oldObjSecret "data") | default dict }}
  accesskey: {{ "admin" | b64enc | quote }}
  secretkey: {{ (get $oldObjSecretData "AWS_SECRET_ACCESS_KEY") | default (randAlphaNum 32 | b64enc) | quote }}
  region: {{ "local" | b64enc | quote }}
  bucket: {{ "cdash" | b64enc | quote }}
{{- end }}

{{ if .Values.postgresql.enabled }}
{{- $dbSecretName := printf "%s-%s" .Release.Name "db" -}}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $dbSecretName }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # Generate a random password if one doesn't already exist
  {{- $oldDBSecret := lookup "v1" "Secret" .Release.Namespace $dbSecretName }}
  {{- $oldDBSecretData := (get $oldDBSecret "data") | default dict }}
  username: {{ "postgres" | b64enc | quote }}
  password: {{ (get $oldDBSecretData "password") | default (randAlphaNum 32 | b64enc) | quote }}
  database: {{ "cdash" | b64enc | quote }}
  host: {{ printf "%s-%s" .Release.Name "postgresql" | b64enc | quote }}
  port: {{ "5432" | b64enc | quote }}
{{- end }}
