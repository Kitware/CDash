"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sP`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")


"Indicates what fields are available at the top level of a query operation."
type Query {
  "Find a single project."
  project(
    "Search by primary key."
    id: ID @eq @rules(apply: ["prohibits:name", "required_without:name"])

    "Search by name."
    name: String @eq @rules(apply: ["prohibits:id", "required_without:id"])
  ): Project @find(scopes: ["forUser"])

  "List the projects available to the current user."
  projects(
    filters: _ @filter(inputType: "ProjectFilterInput")
  ): [Project!]! @paginate(scopes: ["forUser"], type: CONNECTION) @orderBy(column: "id")
}


type Mutation {
  "Create a new project."
  createProject(input: CreateProjectInput! @spread): Project @create @canModel(ability: "create")
}


"A registered CDash user.  Can be autogenerated by 3rd-party authentication providers."
type User {
  "Unique primary key."
  id: ID!

  "Non-unique first name."
  firstname: String!

  "Non-unique last name."
  lastname: String!

  "Unique email address."
  email: String!

  "Institution."
  institution: String!

  "Whether or not the user is a global administrator."
  admin: Boolean!
}


"Project."
type Project {
  "Unique primary key."
  id: ID!

  "Unique name."
  name: String!

  "Description."
  description: String!

  "Homepage for this project."
  homeurl: String!

  "Visibility."
  visibility: ProjectVisibility! @rename(attribute: "public")

  "A boolean indicating whether authenticated submissions are required."
  authenticateSubmissions: Boolean! @rename(attribute: "authenticatesubmissions")

  "A LDAP group users must be a member of to access the project."
  ldapFilter: String @rename(attribute: "ldapfilter")

  builds(
    filters: _ @filter(inputType: "BuildFilterInput")
  ): [Build!]! @hasMany(type: CONNECTION) @orderBy(column: "id")

  """
  The most recent build submitted to this server.  Note: this is determined by
  submission time, not build start time.
  """
  mostRecentBuild: Build @hasOne

  "The sites which have submitted a build to this project."
  sites(
    filters: _ @filter(inputType: "SiteFilterInput")
  ): [Site!]! @belongsToMany(type: CONNECTION) @orderBy(column: "id")

  "Users with the administrator role for this project."
  administrators: [User!]! @belongsToMany(type: CONNECTION) @orderBy(column: "id")
}

enum ProjectVisibility {
  "Available to all users and guests."
  PUBLIC @enum(value: 1)

  "Available to all registered users."
  PROTECTED @enum(value: 2)

  "Only available to users added to the project."
  PRIVATE @enum(value: 0)
}

input CreateProjectInput {
  "Unique name."
  name: String!

  "Description."
  description: String!

  "Project homepage"
  homeurl: String!

  "Visibility."
  visibility: ProjectVisibility! @rename(attribute: "public") @rules(attribute: "public", apply: ["App\\Rules\\ProjectVisibilityAllowed"])

  "A boolean indicating whether authenticated submissions are required."
  authenticateSubmissions: Boolean! @rename(attribute: "authenticatesubmissions") @rules(attribute: "authenticatesubmissions", apply: ["App\\Rules\\ProjectAuthenticateSubmissions"])

  "A LDAP group users must be a member of to access the project."
  ldapFilter: String @rename(attribute: "ldapfilter")
}

input ProjectFilterInput {
  id: ID
  name: String
  visibility: ProjectVisibility @rename(attribute: "public")
}


"Build."
type Build {
  "Unique primary key."
  id: ID!

  "Name."
  name: String!

  "Start time."
  startTime: DateTimeTz! @rename(attribute: "starttime")

  "End time."
  endTime: DateTimeTz! @rename(attribute: "endtime")

  "Submission time."
  submissionTime: DateTimeTz! @rename(attribute: "submittime")

  "The buildstamp generated by CTest. Example: 20091218-1414-Experimental"
  stamp: String!

  # TODO: Create a designated UUID GraphQL type
  "UUID."
  uuid: String!

  # TODO: Determine if there are more specific values we can use for this
  "Type."
  buildType: String! @rename(attribute: "type")

  "The version of CTest used to generate this build. Example: ctest-2.9.20091218"
  generator: String!

  "The command used to drive the build. Example: /usr/local/bin/cmake --build . --config Release"
  command: String!

  "The number of errors generated during the configuration step."
  configureErrorsCount: Int @rename(attribute: "configureerrors")

  "The number of warnings generated during the configuration step."
  configureWarningsCount: Int @rename(attribute: "configurewarnings")

  "The duration of the configure step in seconds."
  configureDuration: Int! @rename(attribute: "configureduration")

  "The number of errors generated during the build step."
  buildErrorsCount: Int @rename(attribute: "builderrors")

  "The number of warnings generated during the build step."
  buildWarningsCount: Int @rename(attribute: "buildwarnings")

  "The duration of the build step in seconds."
  buildDuration: Int! @rename(attribute: "buildduration")

  "The number of failed tests."
  failedTestsCount: Int @rename(attribute: "testfailed")

  "The number of tests which failed the time status."
  timeStatusFailedTestsCount: Int @rename(attribute: "testtimestatusfailed")

  "The number of passed tests."
  passedTestsCount: Int @rename(attribute: "testpassed")

  "The number of tests not run for this build."
  notRunTestsCount: Int @rename(attribute: "testnotrun")

  "The duration of the test step in seconds."
  testDuration: Int! @rename(attribute: "testduration")

  "The site associated with this build."
  site: Site! @belongsTo

  # TODO: Make an "errors" field which returns the union of basic and rich errors
  """
  A list of "basic" errors submitted for this build.
  """
  basicErrors: [BasicBuildAlert!]! @hasMany(type: CONNECTION) @orderBy(column: "id", direction: DESC)

  # TODO: Make a "warnings" field which returns the union of basic and rich warnings
  """
  A list of "basic" warnings submitted for this build.
  """
  basicWarnings: [BasicBuildAlert!]! @hasMany(type: CONNECTION) @orderBy(column: "id", direction: DESC)

  project: Project! @belongsTo
}

input BuildFilterInput {
  id: ID
  name: String
  startTime: DateTimeTz @rename(attribute: "starttime")
  endTime: DateTimeTz @rename(attribute: "endtime")
  submissionTime: DateTimeTz @rename(attribute: "submittime")
  stamp: String
  uuid: String
}


"""
"Basic" alerts are warnings or errors scraped from the build log, as opposed to "rich" alerts which
come from CTest launchers.  A given build should either have all "basic" alerts or all "rich" alerts.
Users should take both types into account when querying the alerts for a given build.

https://cmake.org/cmake/help/latest/manual/ctest.1.html#ctest-build-step
"""
type BasicBuildAlert {
  logLine: Int! @rename(attribute: "logline")

  text: String!

  sourceFile: String! @rename(attribute: "sourcefile")

  sourceLine: Int! @rename(attribute: "sourceline")

  preContext: String @rename(attribute: "precontext")

  postContext: String @rename(attribute: "postcontext")
}


"Site."
type Site {
  "Unique primary key."
  id: ID!

  name: String!

  "IP address."
  ip: String!

  latitude: Float!

  longitude: Float!

  "Every edit of this site's information."
  information: [SiteInformation!]! @hasMany(type: CONNECTION) @orderBy(column: "timestamp")

  "The most recent information we have about this site."
  # TODO: Figure out how to support the date parameter. Perhaps it would be better to use a scope instead.
  mostRecentInformation: SiteInformation @hasOne
}

input SiteFilterInput {
  id: ID
  name: String
  ip: String
  latitude: Float
  longitude: Float
}


"Details about a site at a given point in time."
type SiteInformation {
  "Creation timestamp."
  timestamp: DateTimeTz!

  processorIs64Bits: Boolean @rename(attribute: "processoris64bits")

  processorVendor: String @rename(attribute: "processorvendor")

  processorVendorId: String @rename(attribute: "processorvendorid")

  processorFamilyId: Int @rename(attribute: "processorfamilyid")

  processorModelId: Int @rename(attribute: "processormodelid")

  processorCacheSize: Int @rename(attribute: "processorcachesize")

  numberLogicalCpus: Int @rename(attribute: "numberlogicalcpus")

  numberPhysicalCpus: Int @rename(attribute: "numberphysicalcpus")

  totalVirtualMemory: Int @rename(attribute: "totalvirtualmemory")

  totalPhysicalMemory: Int @rename(attribute: "totalphysicalmemory")

  logicalProcessorsPerPhysical: Int @rename(attribute: "logicalprocessorsperphysical")

  processorClockFrequency: Int @rename(attribute: "processorclockfrequency")

  description: String
}
