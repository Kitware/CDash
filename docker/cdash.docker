FROM php:8.1-apache-buster
LABEL MAINTAINER="Kitware, Inc. <cdash@public.kitware.com>"

ARG CDASH_DB_HOST=localhost

# Designates as dev build, adds testing infrastructure, et al.
ARG DEVELOPMENT_BUILD

# make sure it's set in the ENV for reference in docker-entrypoint.sh
# TODO: rename CDASH_DEVELOPMENT_BUILD ?
ENV DEVELOPMENT_BUILD=$DEVELOPMENT_BUILD

RUN apt-get update                                                         \
 && apt-get install -y gnupg                                               \
 && curl -fsSL https://deb.nodesource.com/setup_19.x | bash                \
 && apt-get install -y apt-utils git libbz2-dev libfreetype6-dev           \
    libjpeg62-turbo-dev libldap2-dev libmcrypt-dev libpng-dev libpq-dev    \
    libxslt-dev libxss1 nodejs unzip wget zip                              \
 && docker-php-ext-configure pgsql --with-pgsql=/usr/local/pgsql           \
 && docker-php-ext-configure gd --with-freetype=/usr/include/              \
                                --with-jpeg=/usr/include/                  \
 && docker-php-ext-install -j$(nproc) bcmath bz2 gd ldap                   \
    pdo_mysql pdo_pgsql xsl                                                \
 && wget -q -O checksum https://composer.github.io/installer.sha384sum     \
 && wget -q -O composer-setup.php https://getcomposer.org/installer        \
 && sha384sum -c checksum                                                  \
 && php composer-setup.php                                                 \
    --install-dir=/usr/local/bin --filename=composer                       \
 && php -r "unlink('composer-setup.php');"                                 \
 && composer self-update --no-interaction

# Creates the kitware home directory with directory for cdash
WORKDIR /home/kitware/cdash

# Copy CDash (current folder) into /home/kitware/cdash
COPY ./app ./app
COPY ./artisan ./artisan
COPY ./babel.config.js ./babel.config.js
COPY ./bootstrap ./bootstrap
COPY ./.circleci ./.circleci
COPY ./CMakeLists.txt ./CMakeLists.txt
COPY ./composer.json ./composer.json
COPY ./composer.lock ./composer.lock
COPY ./config ./config
COPY ./CTestConfig.cmake ./CTestConfig.cmake
COPY ./CTestCustom.cmake.in ./CTestCustom.cmake.in
COPY ./database ./database
COPY ./docs ./docs
COPY ./docker-compose.yml ./docker-compose.yml
COPY ./docker ./docker
COPY ./.dockerignore ./.dockerignore
COPY ./.editorconfig  ./.editorconfig
COPY ./.env.example ./.env
COPY ./.env.example ./.env.example
COPY ./.eslintrc.js ./.eslintrc.js
COPY ./.gitattributes ./.gitattributes
COPY ./.git ./.git
COPY ./.gitignore ./.gitignore
COPY ./jest.config.js ./jest.config.js
COPY ./LICENSE ./LICENSE
COPY ./package.json ./package.json
COPY ./package-lock.json ./package-lock.json
COPY ./.php-cs-fixer.dist.php ./.php-cs-fixer.dist.php
COPY ./phpunit.xml ./phpunit.xml
COPY ./public ./public
COPY ./README.md ./README.md
COPY ./resources ./resources
COPY ./routes ./routes
COPY ./server.php ./server.php
COPY ./storage ./storage
COPY ./tests ./tests
COPY ./webpack.mix.js ./webpack.mix.js

# Install newer version of CMake
RUN if [ "$DEVELOPMENT_BUILD" = '1' ]; then                                \
  wget -q -O cmake-linux.sh https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-linux-x86_64.sh                                                                       \
  && sh cmake-linux.sh -- --skip-license --prefix=/usr                     \
  && rm cmake-linux.sh;                                                    \
fi

WORKDIR /home/kitware/cdash

# Install PHP dependencies with composer
# Set up testing environment if this is a development build
RUN if [ "$DEVELOPMENT_BUILD" = '1' ]; then                                \
 pecl install xdebug                                                       \
 && docker-php-ext-enable xdebug                                           \
 && mkdir -p /var/www/.npm && chown www-data:www-data /var/www/.npm        \
 && composer install --no-interaction --no-progress --prefer-dist          \
 && mkdir _build && cd _build                                              \
 && cmake                                                                  \
  -DCDASH_DB_HOST=$CDASH_DB_HOST                                           \
  -DCDASH_DIR_NAME=                                                        \
  -DCDASH_TESTING_URL=http://cdash/                                        \
  -DCDASH_SERVER=cdash                                                     \
  -DCDASH_SELENIUM_HUB=selenium-hub                                        \
  -DCTEST_UPDATE_VERSION_ONLY=1 ..                                         \
 && cp /home/kitware/cdash/docker/conf.js                                  \
       /home/kitware/cdash/_build/app/cdash/tests/js/e2e_tests/conf.js     \
 && cp /home/kitware/cdash/docker/.env.laravel /home/kitware/cdash/.env;   \
else                                                                       \
 composer install --no-interaction --no-progress --prefer-dist --no-dev    \
                  --optimize-autoloader                                    \
 && echo "LOG_CHANNEL=stderr" >> .env;                                     \
fi

RUN cp app/cdash/php.ini /usr/local/etc/php/conf.d/cdash.ini

# Install javascript dependencies
RUN npm install

# Generate Laravel application key
RUN php artisan key:generate

# Expose CDash config to Laravel
RUN php artisan config:migrate

# Run laravel-mix to builds assets
RUN npm run dev

# Set www-data user as the owner of the CDash directory
RUN chown -R www-data:www-data .

# Configure Apache
RUN cp /home/kitware/cdash/docker/cdash-site.conf                          \
       /etc/apache2/sites-available/cdash-site.conf

# Remove default site, add cdash-site, enable mod_rewrite, enable php
RUN a2dissite 000-default                                                  \
 && a2ensite cdash-site                                                    \
 && a2enmod rewrite                                                        \
 && a2enmod php

COPY docker/docker-entrypoint.sh /docker-entrypoint.sh
COPY docker/bash /bash-lib

RUN chmod +x /docker-entrypoint.sh

EXPOSE 80

WORKDIR /home/kitware/cdash/_build

ENTRYPOINT ["/bin/bash", "/docker-entrypoint.sh"]
CMD ["serve"]
